// code from https://www.codecademy.com/courses/learn-java/lessons/introduction-to-java/exercises/whats-your-name?action=lesson_resume

public class YourName {
	public static void main(String[] args) {

		System.out.println("Beastron Carpio");

	}
}


//data types

/*The first data type we will use is int.

int is short for integer, which are all positive and negative numbers, including zero. This number could represent the number of visits a website has received or the number of programming languages you know.
The int data type only allows values between -2,147,483,648 and 2,147,483,647.*/  

public class DataTypes {
	public static void main(String[] args) {

		System.out.println(2468);

	}
}


/*he next data type we will use is the boolean.

A boolean is a data type that can only be either true or false.*/


public class DataTypesB {
	public static void main(String[] args) {

		System.out.println(true);

	}
}


/*The char data type is used to represent single characters. That includes the keys on a keyboard that are used to produce text.

char is short for character and can represent a single character.
All char values must be enclosed in single quotes, like this: 'G'.*/
  
  public class DataTypesC {
	public static void main(String[] args) {

		System.out.println('X');

	}
}


//variables

/*Another important feature of Java (and of many programming languages) is the ability to store values using variables.

A variable stores a value.
In Java, all variables must have a specified data type.
We can assign a variable to a specified data type, like this:

int myLuckyNumber = 7;
The variable myLuckyNumber now stores the value 7 as an int type.

A semicolon ; is also used to end all Java single code statements. We will cover statements that should not end in a semicolon later in this course.
*/
  
public class Variables {
	public static void main(String[] args) {

		int myNumber = 42;
		boolean isFun = true; 
		char movieRating = 'A'; 

	}
}  
  
//whitespace

/*Whitespace is one or more characters (such as a space, tab, enter, or return) that do not produce a visible mark or text. Whitespace is often used to make code visually presentable.

Java will ignore whitespace in code, but it is important to know how to use whitespace to structure code well. If you use whitespace correctly, code will be easier for you and other programmers to read and understand.*/

public class WhiteSpace {
	public static void main(String[] args) {

		boolean isFormatted = false;
    		System.out.println(isFormatted);

	}
} //line 84 - 93, correctly formatted code.

//comments

/*Single line comments are one line comments that begin with two forward slashes:
// I'm a single line comment!
Multi-line comments are generally longer comments that can span multiple lines. They begin with /* and end with */ . Here's an example:
/*

Hello, 
Java! 

*/  */  

public class Comments {
	public static void main(String[] args) {

		//System.out.println("Noise!");
		
/*Dude, I seriously looked this up online about 20 minutes ago. & this is so cutting into my SWTOR time !! :( :( */



		
	}
}

//arithmetic

/*Now let's try arithmetic in Java. You can add, subtract, multiply, and divide numbers and store them in variables like this:

int sum = 34 + 113;
int difference = 91 - 205;
int product = 2 * 8; 
int quotient = 45 / 3;  */  

public class Arithmetic {
	public static void main(String[] args) {

		int myNumber = 6*8/(2+2);
		System.out.println(myNumber);

	}
}

//modulo

/*The modulo operator - represented in Java by the % symbol - returns the remainder of dividing two numbers.
For example, 15 % 6 will return the value of 3, because that is the remainder left over after dividing 15 by 6.*/  

public class Modulo {
	public static void main(String[] args) {

		int myRemainder = 2%4;
		System.out.println(myRemainder);

	}
} 

//rational operators

/*Relational operators compare data types that have a defined ordering, like numbers (since numbers are either smaller or larger than other numbers).

Relational operators will always return a boolean value of true or false.

Here are a few relational operators:

< : less than.
<=: less than or equal to.
>: greater than.
>=: greater than or equal to.
A relational operator is placed between the two operands (the terms that you want to compare using the relational operator). The result of a relational operation is printed out in the following statement:

System.out.println(5 < 7);
The example above will print out true because the statement "5 is less than 7" is true.*/  

public class RelationalOperators {
	public static void main(String[] args) {

		System.out.println(8>=2);

	}
}


//Equality Operators

/*The equality operators are:

==: equal to.
!=: not equal to.
Equality operators do not require that operands share the same ordering. For example, you can test equality across boolean, char, or int data types. The example below combines assigning variables and using an equality operator:

char myChar = 'A';
int myInt = -2;
System.out.println(myChar == myInt);
The example above will print out false because the value of myChar ('A') is not the same value as myInt ('-2').
*/

public class EqualityOperators {
	public static void main(String[] args) {
		
    char myChar = 'X';
    
    int myInt = 12;
    
		System.out.println(myChar != myInt);

	}
}

//CONDITIONALS AND CONTROL FLOW

public class Conditionals {
	public static void main(String[] args) {


		if (1 < 4 && 0 > 5) {

			System.out.println("You ordered a cup of hot, mint tea.");

		} else if (21 <= 19 || 17 >= 28) {
			
			System.out.println("You ordered freshly squeezed orange juice!");

		} else if ( !(true == true) ) {

			System.out.println("You ordered hot cocoa!");

		} else {

			System.out.println("You ordered the arrest of Darth Envy!"); //addendum

		}

		char answerChoice = 'C';

		switch (answerChoice) {

			case 'A': System.out.println("You answered: " + answerChoice + ". Please try again.");
								break; 

			case 'B': System.out.println("You answered: " + answerChoice + ". Please try again.");
								break;

			case 'C': System.out.println("You answered: " + answerChoice + ". That is correct!");
								break;

			case 'D': System.out.println("You answered: " + answerChoice + ". Please try again.");
								break;

			default:
				System.out.println("Please select a valid answer choice.");

		}


	}
}



//Boolean Operators: &&

/*There are three Boolean operators that we will explore. Let's start with the first one: and.

The and operator is represented in Java by &&.
It returns a boolean value of true only when the expressions on both sides of && are true.
For example, the code below shows one outcome of the Boolean operator &&:

// The following expression uses the "and" Boolean operator
System.out.println(true && true); // prints true
The code below shows the rest of the possible outcomes of the Boolean operators: &&:

// The following expressions use the "and" Boolean operator
System.out.println(false && false); // prints false
System.out.println(false && true); // prints false
System.out.println(true && false); // prints false
We can also use the Boolean operator && with Boolean expressions such as the following:

System.out.println(2 < 3 && 4 < 5);
The example above will print out true because the statements "2 is less than 3" and "4 is less than 5" are both true.*/  

public class And {
	public static void main(String[] args) {

		System.out.println(true && true); //prints true.
		
	}
}

//Boolean Operators: ||

/*The or operator is represented in Java by ||.
It returns a Boolean value of true when at least one expression on either side of || is true.
The code below shows all the outcomes of the Boolean operator ||:

//The "or" Boolean operator:

System.out.println(false || false); // prints false
System.out.println(false || true); // prints true
System.out.println(true || false); // prints true
System.out.println(true || true); // prints true
We can also use the Boolean operator || with Boolean expressions such as the following:

System.out.println(2 > 1 || 3 > 4);
The example above will print out true because at least one statement — "2 is greater than 1" — is true even though the other statement — "3 is greater than 4" — is false.*/
  
public class Or {
	public static void main(String[] args) {

		System.out.println(false || false); 
		
	}
}

//Boolean Operators: !

/*The not operator is represented in Java by !.
It will return the opposite of the expression immediately after it. It will return false if the expression is true, and true if the expression is false.
The code below shows all the outcomes of the Boolean operator !:

//The "not" Boolean operator:

System.out.println(!false); // prints true
System.out.println(!true); // prints false
We can also use the Boolean operator ! with Boolean expressions such as the following:

System.out.println( !(4 <= 10) );
The example above will print out false because the statement "4 is less than or equal to 10" is true, but the ! operator will return the opposite value, which is false.*/

public class Not {
	public static void main(String[] args) {

		System.out.println(!false);
		System.out.println( !(5>=1) );
		
	}
}



//Boolean Operators: Precedence

/*The three Boolean operators &&, ||, and ! can also be used together and used multiple times to form larger Boolean expressions.

However, just like numerical operators, Boolean operators follow rules that specify the order in which they are evaluated. This order is called Boolean operator precedence.

The precedence of each Boolean operator is as follows:

! is evaluated first
&& is evaluated second
|| is evaluated third
Like numerical expressions, every expression within parentheses is evaluated first. Expressions are also read from left to right.

The following statement demonstrates how Boolean operator precedence works:

System.out.println( !(false) || true && false);
The example above will print out true. In order, the expression is evaluated as follows:

First, the ! Boolean operator in !(false) returns true.
Second, true && false evaluates to false.
Finally, the remaining expression true || false evaluates to true.*/

public class Precedence {
	public static void main(String[] args) {

		boolean riddle = !( 1 < 8 && (5 > 2 || 3 < 5));
		System.out.println(riddle);

	}
}// prints false. 


//If Statement

/*In Java, the keyword if is the first part of a conditional expression.
It is followed by a Boolean expression and then a block of code. If the Boolean expression evaluates to true, the block of code that follows will be run.
Here's an example of the if statement used with a conditional expression:

if (9 > 2) {
    System.out.println("Control flow rocks!");
}
In the example above, 9 > 2 is the Boolean expression that gets checked. Since the Boolean expression "9 is greater than 2" is true, Control flow rocks! will be printed to the console.

The if statement is not followed by a semicolon (;). Instead it uses curly braces ({ and }) to surround the code block that gets run when the Boolean expression is true.*/  

public class If {
	public static void main(String[] args) {

		if (9 > 2) {

			System.out.println("Access granted.");

		}
		
	}
}


//If-Else Statement

/*The if/else conditional will run the block of code associated with the if statement if its Boolean expression evaluates to true.
Otherwise, if the Boolean expression evaluates to false, it will run the block of code after the else keyword.
Here's an example of if/else syntax:

if (1 < 3 && 5 < 4) {
    System.out.println("I defy the Boolean laws!")
} else {
    System.out.println("You can thank George Boole!");
}
In the example above, the Boolean expression "1 is less than 3" and "5 is less than 4" evaluates to false. The code within the if block will be skipped and the code inside the else block will run instead. The text "You can thank George Boole!" will be printed in the console.*/

public class IfElse {
	public static void main(String[] args) {

		if (7 < 6) {

			System.out.println("Try again...");

		} else {

			System.out.println("Success!");

		}
		
	}
}


//If-ElseIf-Else Statement

/*If the Boolean expression after the if statement evaluates to true, it will run the code block that directly follows.
Otherwise, if the Boolean expression after the else if statement evaluates to true, the code block that directly follow will run.
Finally, if all previous Boolean expressions evaluate to false, the code within the else block will run.
Here's an example of control flow with the if/else if/else statement:

int shoeSize = 10;

if (shoeSize > 12) {
    System.out.println("Sorry, your shoe size is currently not in stock.");
} else if (shoeSize >= 6) {
    System.out.println("Your shoe size is in stock!");
} else {
    System.out.println("Sorry, this store does not carry shoes smaller than a size 6.");
}
In the example above, the int variable shoeSize is equal to 10, which is not greater than 12, but it is greater than or equal to 6. Therefore, the code block after the else if statement will be run.*/

public class IfElseIf {
	public static void main(String[] args) {

		int round = 6;

		if (round > 12) {

			System.out.println("The match is over!");

		} else if (round > 0) {

			System.out.println("The match is underway!");

		}	else {

			System.out.println("The boxing match hasn't started yet.");

		}	
	}
}



//Ternary Conditional

/*The term ternary comes from a Latin word that means "composed of three parts".

These three parts are:

A Boolean expression
A single statement that gets executed if the Boolean expression is true
A single statement that gets executed if the Boolean expression is false
Here is an example of a ternary conditional statement:

int pointsScored = 21;

char gameResult = (pointsScored > 20) ? 'W' : 'L';
System.out.println(gameResult);
In the example above, the int variable called pointsScored is equal to 21.

The Boolean expression is (pointsScored > 20), which evaluates to true. This will return the value of 'W', which is assigned to the variable gameResult. The value 'W' is printed to the console.*/  

public class Ternary {
	public static void main(String[] args) {
		
		int fuelLevel = 3;

		char canDrive = (fuelLevel > 0) ? 'Y' : 'N';
		System.out.println(canDrive);

	}
}










  
