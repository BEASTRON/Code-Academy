// Code

//from https://www.codecademy.com/courses/learn-javascript/lessons/introduction-to-javascript/exercises/types?action=lesson_resume

var myString = "Carpio";
var myNumber = 46;
var myBoolean = true;


// Do not edit the code under this line
console.log("Name: " + myString);
console.log("Lucky Number: " + myNumber);
console.log("Good joke? " + myBoolean);

//other examples

console.log('Have 2 learn and get certifications in ES6, PowerShell, and Python or I will starve 2 death!! ')

console.log('favorite pizza toppings: mushrooms, green peppers, sausage, onions, pepperoni, and extra cheese. ')

//Math Operators

console.log(46 + 3.5)

console.log(2017 - 1990)

console.log(22 * 8)

console.log(10000 / 100)

console.log(9^4) // 11, this doesn't print the correct answer.
console.log(9*9*9*9) // 6561, However, this does !!

//notice no single or double quotes were used, otherwise the numbers used in the operations become strings.

// Using 1 set of () for each set of operations in the case of multiple operations allows the results to be printed, otherwise the correct results will not be printed. if there is an odd number of (), an error results.

//Modulus example

console.log(365 % 27)

//Functions

console.log(Math.random() * 50);  // prints #'s btwn 0 - 50

console.log(Math.random() * 100);  //prints #'s btwn 0 - 100

console.log(Math.floor(Math.random() * 100));  //Math.floor rounds the random # to the nearest whole #

//Comments

// single line comments.

/*..........*/ //denotes multi-line comments.  


// createVariable.js

var strength = '50,000 pounds'; 
console.log(strength);  // prints 50,000 pounds

var strength = '50,000 pounds'; 
console.log('How much stuff can a variable hold?', strength);  // prints How much stuff can a variable hold? 50,000 pounds


//changeVariable.js

var morningAlarm = '6:30AM';
morningAlarm = '9:00AM'; // commenting out this variable will print the 1st variable & vice versa
console.log('Morning alarm is set to: ', morningAlarm)
// **commenting out both variable causes a reference error because the variable is not defined.


// stringInterpolation.js

var favoriteAnimal = 'painted turtle';
console.log('My favorite animal: ' + favoriteAnimal + '.')
  

var favoriteAnimal = ''; // sets variable
console.log(' ' +  + '') // prints string with the variable between the operators


// ifElse.js

var harryPotterFan = false; // **Boolean determines which code block will run
if(harryPotterFan){
   console.log('Mischief managed.');
}else{
  console.log('I lead a muggles\'s life.'); // Since the string is surrounded by single quotes, we can use a back slash to add a single quote within the string. This is called escaping a character.
}


var trekkieFanBoy = true; // **
if(trekkieFanBoy){
   console.log('I\'m awesome, deal with it!!'); // Since the string is surrounded by single quotes, we can use a back slash to add a single quote within the string. This is called escaping a character.
}else{
  console.log('I suck at life.');
}


// comparison.js 

var hungerLevel = 12; // var once again dictates which block will execute or run. 
  if(hungerLevel >= 7){
    console.log('Time to eat.');
  }else{
   	console.log('Let\'s eat later');
  }
  
  
// werewolf.js

var moonPhase = 'full';
 if(moonPhase === 'full'){
    console.log('Howwwwlll!!');
  }else{
    console.log('I swear I am not a werewolf...');
  }


var moonPhase = 'half';
  if(moonPhase === 'full'){
    console.log('Howwwwlll!!');
  }else{
    console.log('I swear I am not a werewolf...'); // this is true for me !! :p :p 
  }


var moonPhase = 'solar eclipse';  // **do NOT stop & stare, U know where !! :p :p :p :p
  if(moonPhase === 'full'){
    console.log('Howwwwlll!!');
  } else if(moonPhase === 'mostly full'){
    console.log('Arms and legs are getting hairier');
  }else if(moonPhase === 'mostly new'){
    console.log('Back on two feet');
  }else{
    console.log('Invalid moon phase');
  }


// &&, || operators

var moonPhase = 'full';
var foggyNight = false;

if (moonPhase === 'full' && foggyNight) {
  console.log('Howwlll!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') { 
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}


if (moonPhase === 'full' && foggyNight) {
  console.log('Howwlll!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') { 
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}



var moonPhase = 'full';
var foggyNight = false;

if (moonPhase === 'full' || foggyNight) {
  console.log('Howwlll!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') { 
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}


// **If we want to write a program with 25 different conditions, we can turn to a switch statement to write more concise and readable code. To a computer, a switch statement and an if/else statement are the same, but a switch statement can be easier for other humans to read. Part of being a good developer is writing code that both computers and other humans can read.

var moonPhase = 'mostly new';
switch(moonPhase){
case 'full': 
    console.log('Howwwwlll!!');
    break;
case 'mostly full':
    console.log('Arms and legs are getting hairier');
    break;
case 'mostly new':
    console.log('Back on two feet');
    break; 
default:
    console.log('Invalid moon phase');
    break;
}

// functions
// pizza.js


function takeOrder() {
  console.log('Order: pizza');
}

takeOrder();



function takeOrder(topping) {
  console.log('Order: pizza topped with ' + topping); //interpolation
}

takeOrder('mushrooms, green peppers, and pepperoni');  //**not sure of max. string length



function takeOrder(topping, crustType) {
  console.log('Order: ' + crustType + ' crust topped with ' + topping);
}
//takeOrder function, called the function 3 times and passed in different arguments each time for topping and crustType.
takeOrder('bacon', 'thin');
takeOrder('pepperoni', 'regular');
takeOrder('pesto', 'thin');








