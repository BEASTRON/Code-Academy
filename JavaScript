// Code

//from https://www.codecademy.com/courses/learn-javascript/lessons/introduction-to-javascript/exercises/types?action=lesson_resume

var myString = "Carpio";
var myNumber = 46;
var myBoolean = true;


// Do not edit the code under this line
console.log("Name: " + myString);
console.log("Lucky Number: " + myNumber);
console.log("Good joke? " + myBoolean);

//other examples

console.log('Have 2 learn and get certifications in ES6, PowerShell, and Python or I will starve 2 death!! ')

console.log('favorite pizza toppings: mushrooms, green peppers, sausage, onions, pepperoni, and extra cheese. ')

//Math Operators

console.log(46 + 3.5)

console.log(2017 - 1990)

console.log(22 * 8)

console.log(10000 / 100)

console.log(9^4) // 11, this doesn't print the correct answer.
console.log(9*9*9*9) // 6561, However, this does !!

//notice no single or double quotes were used, otherwise the numbers used in the operations become strings.

// Using 1 set of () for each set of operations in the case of multiple operations allows the results to be printed, otherwise the correct results will not be printed. if there is an odd number of (), an error results.

//Modulus example

console.log(365 % 27)

//Functions

console.log(Math.random() * 50);  // prints #'s btwn 0 - 50

console.log(Math.random() * 100);  //prints #'s btwn 0 - 100

console.log(Math.floor(Math.random() * 100));  //Math.floor rounds the random # to the nearest whole #

//Comments

// single line comments.

/*..........*/ //denotes multi-line comments.  


// createVariable.js

var strength = '50,000 pounds'; 
console.log(strength);  // prints 50,000 pounds

var strength = '50,000 pounds'; 
console.log('How much stuff can a variable hold?', strength);  // prints How much stuff can a variable hold? 50,000 pounds


//changeVariable.js

var morningAlarm = '6:30AM';
morningAlarm = '9:00AM'; // commenting out this variable will print the 1st variable & vice versa
console.log('Morning alarm is set to: ', morningAlarm)
// **commenting out both variable causes a reference error because the variable is not defined.


// stringInterpolation.js

var favoriteAnimal = 'painted turtle';
console.log('My favorite animal: ' + favoriteAnimal + '.')
  

var favoriteAnimal = ''; // sets variable
console.log(' ' +  + '') // prints string with the variable between the operators


// ifElse.js

var harryPotterFan = false; // **Boolean determines which code block will run
if(harryPotterFan){
   console.log('Mischief managed.');
}else{
  console.log('I lead a muggles\'s life.'); // Since the string is surrounded by single quotes, we can use a back slash to add a single quote within the string. This is called escaping a character.
}


var trekkieFanBoy = true; // **
if(trekkieFanBoy){
   console.log('I\'m awesome, deal with it!!'); // Since the string is surrounded by single quotes, we can use a back slash to add a single quote within the string. This is called escaping a character.
}else{
  console.log('I suck at life.');
}


// comparison.js 

var hungerLevel = 12; // var once again dictates which block will execute or run. 
  if(hungerLevel >= 7){
    console.log('Time to eat.');
  }else{
   	console.log('Let\'s eat later');
  }
  
  
// werewolf.js

var moonPhase = 'full';
 if(moonPhase === 'full'){
    console.log('Howwwwlll!!');
  }else{
    console.log('I swear I am not a werewolf...');
  }


var moonPhase = 'half';
  if(moonPhase === 'full'){
    console.log('Howwwwlll!!');
  }else{
    console.log('I swear I am not a werewolf...'); // this is true for me !! :p :p 
  }


var moonPhase = 'solar eclipse';  // **do NOT stop & stare, U know where !! :p :p :p :p
  if(moonPhase === 'full'){
    console.log('Howwwwlll!!');
  } else if(moonPhase === 'mostly full'){
    console.log('Arms and legs are getting hairier');
  }else if(moonPhase === 'mostly new'){
    console.log('Back on two feet');
  }else{
    console.log('Invalid moon phase');
  }


// &&, || operators

var moonPhase = 'full';
var foggyNight = false;

if (moonPhase === 'full' && foggyNight) {
  console.log('Howwlll!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') { 
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}


if (moonPhase === 'full' && foggyNight) {
  console.log('Howwlll!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') { 
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}



var moonPhase = 'full';
var foggyNight = false;

if (moonPhase === 'full' || foggyNight) {
  console.log('Howwlll!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') { 
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}


// **If we want to write a program with 25 different conditions, we can turn to a switch statement to write more concise and readable code. To a computer, a switch statement and an if/else statement are the same, but a switch statement can be easier for other humans to read. Part of being a good developer is writing code that both computers and other humans can read.

var moonPhase = 'mostly new';
switch(moonPhase){
case 'full': 
    console.log('Howwwwlll!!');
    break;
case 'mostly full':
    console.log('Arms and legs are getting hairier');
    break;
case 'mostly new':
    console.log('Back on two feet');
    break; 
default:
    console.log('Invalid moon phase');
    break;
}

// functions
// pizza.js


function takeOrder() {
  console.log('Order: pizza');
}

takeOrder();



function takeOrder(topping) {
  console.log('Order: pizza topped with ' + topping); //interpolation
}

takeOrder('mushrooms, green peppers, and pepperoni');  //**not sure of max. string length



function takeOrder(topping, crustType) {
  console.log('Order: ' + crustType + ' crust topped with ' + topping);
}
//takeOrder function, called the function 3 times and passed in different arguments each time for topping and crustType.
takeOrder('bacon', 'thin');
takeOrder('pepperoni', 'regular');
takeOrder('pesto', 'thin');



function takeOrder(topping, crustType) {
  console.log('Order: ' + crustType + ' crust topped with ' + topping);
}
// once again, takeOrder function, called the function 3 times and passed in different arguments each time for topping and crustType.
takeOrder('mushroom', 'thick');
takeOrder('sausage, onions, green peppers', 'regular');
takeOrder('supreme', 'thick');



// **return keyword, used primarily in functions to facilitate execution. 
var orderCount = 0;

function takeOrder(topping, crustType) {
  console.log('Order: ' + crustType + ' crust topped with ' + topping);
  orderCount = orderCount + 1;
}

function getSubTotal(itemCount) {
  return itemCount * 7.5; //**return will take the result of the math operation and give it back to whatever calls it. In this case it is the number of times takeOrder is executed.  
}

takeOrder('cheese', 'thin');
takeOrder('supreme', 'regular');
takeOrder('pesto', 'thin');
takeOrder('mushroom and green peppers with onions', 'thin');

console.log(getSubTotal(orderCount));




var orderCount = 0;

function takeOrder(topping, crustType) {
  console.log('Order: ' + crustType + ' crust topped with ' + topping);
  orderCount = orderCount + 1;
}

function getSubTotal(itemCount) {
  return itemCount * 7.5;
}

function getTax() {
  return getSubTotal(orderCount) * 0.06;
}

function getTotal() {
  return getSubTotal(orderCount) + getTax();
}


takeOrder('mushrooms with green peppers', 'thin');
takeOrder('supreme', 'regular');
takeOrder('pesto', 'thin');
takeOrder('green peppers and onions','thick');

console.log(getSubTotal(orderCount));
console.log(getTotal());



//scope.js

var laundryRoom = 'Basement';
var mailRoom = 'Room 1A';

console.log('Laundry: ' + laundryRoom +  ', Mail: ' + mailRoom);


var laundryRoom = 'Basement';
var mailRoom = 'Room 1A';

var myApartment = function() {
  var mailBoxNumber = 'Box 3';
  var laundryRoom = 'In-unit';
  console.log('Mail box: ' + mailBoxNumber + ', Laundry:' + laundryRoom);
};

myApartment(); // Allows access to variables in myApartment function from line 305 to line 309.


// Sample Code

function myApartment() {
	var myCoffeeMaker = 'Aeropress';
	
	var myCloset = 'Extra coats in the back';
	
	var myRefridgerator = 'Filled with veggies and dark chocolate.';
	var myDog = 'Nikko';
	
};

var buildingLaundryCode = 4927;
var buildingAddress = '150 E 14th St, New York, NY';
var buildingPhone = '(481) 516-2342'; 



// Do not edit the code after this line
console.log("**Apartment Building Information**");
console.log("Laundry code: " + buildingLaundryCode + "\nPhone: " + buildingPhone + "\nMailing address: " + buildingAddress);



myApartment();



//Scope is the idea in programming that some variables are acessible/inaccessible from other parts of the program.

//Global Scope refers to variables that are accessible to every part of the program.

//Functional Scope refers to variables created inside functions, which are not accessible outside of its block.



// arrays.js


var bucketList = ['JavaScript', 'Python', 'C#'];
console.log(bucketList); 

var bucketList = ['JavaScript Certification', 'Python Certification', 'C# Certification'];
var listItem = bucketList[0];
//var listItem = bucketList[1];
console.log(listItem); 


var bucketList = ['JavaScript Certification', 'Python Certification', 'C# Certification'];
//var listItem = bucketList[0];
//var listItem = bucketList[1];
console.log(bucketList.length); //We can attach this to any variable holding an array and it will return the number of items inside.


//push()

var bucketList = ['JavaScript Certification', 'Python Certification', 'C# Certification'];
bucketList.push('Powershell Certification', 'C++ Certification'); //**push() is a function and one that JavaScript allows us to use right on an array. push() adds item(s) to the array. 
console.log(bucketList);

//pop()

var bucketList = ['JavaScript Certification', 'Python Certification', 'C# Certification'];
//var listItem = bucketList[0];
//var listItem = bucketList[1];
//console.log(bucketList.length);
bucketList.push('Powershell Certification', 'C++ Certification');
bucketList.pop('C++ Certification') //**pop() deletes the last item of an array.
console.log(bucketList);

/*Arrays are lists and are a way to store data in JavaScript. Each item inside of an array is at a numbered position. Arrays are created with brackets [].
We can access one item in an array using it's numbered position, with syntax like: myArray[0].
Arrays have a length property, which allows you to see how many items are in an array.
Arrays also have their own methods, including push and pop, which add and subtract items from an array, respectively.*/


//loops
var vacationSpots = ['Japan','Australia','Spain'];
console.log(vacationSpots[0]);
console.log(vacationSpots[1]);
console.log(vacationSpots[2]);

//for loops
/*Within the for loop's parentheses, the start condition is var i = 0, which means the loop will start counting at 0.
The stop condition is i < animals.length, which means the loop will run as long as i is less than the length of the animals array. When i is greater than the length of the animals array, the loop will stop looping.
The iterator is i++. This means that each loop, i will have 1 added to it.
And finally, the code block is inside the { ... }. The block will run each loop, until the loop stops. The secret to loops is that i, the variable we created inside the for loop's parentheses, is always equal to a number. To be more clear, the first loop, i will equal 0, the second loop, i will equal 1, and the third loop, i will equal 2.*/

var vacationSpots = ['Japan','Australia','Spain'];
for(var i = 0; i < vacationSpots.length; i++){
  console.log(vacationSpots[i]);
}


var vacationSpots = ['Japan','Australia','Spain'];
for(var i = 0; i < vacationSpots.length; i++){
  console.log('I would love to visit ' + vacationSpots[i]);
}


var vacationSpots = ['Japan','Australia','Spain'];
for(var i = vacationSpots.length; i >= 0; i--){
  console.log('I would love to visit '+ vacationSpots[i]);
} 
/*we printed 'I would love to visit undefined'. Why did this happen?

It's because the length of vacationSpots is 3 and vacationSpots has items in its array at positions 0, 1, and 2.*/



//modified loop. **Since JavaScript starts from 0, make the start condition the length of the vacationSpots array, minus 1 as shown in line 426.
var vacationSpots = ['Japan','Australia','Spain'];
for(var i = vacationSpots.length - 1; i >= 0; i--){
  console.log('I would love to visit '+ vacationSpots[i]);
}



//vacationCompare.js

var myPlaces = ['Paris', 'New York', 'Barcelona'];
var friendPlaces = ['Rome', 'Chicago', 'Paris'];

for (var i = 0; i < myPlaces.length; i++) {
    console.log(myPlaces[i]);
  
  for (var j = 0; j < friendPlaces.length; j++) {
        console.log(friendPlaces[j]);
    
    if (myPlaces[i] === friendPlaces[j]) {
    			console.log('Match: ' + myPlaces[i]);
				} //** if/else statement that checks if myPlaces[i] is equal to friendPlaces[j]. Lines 443 - 445. 
    }
}
/*Your first place printed, then all three of your friend's. Then your second place, then your friend's places again. And then one more time.

This is because the inner for loop runs completely every time the outer for loop runs once. Click 'Run' one more time to proceed.

The purpose of the program is to see what you and your friend have in common. Let's utilize the === comparison with an if/else statement.

Inside the second for loop's block, write an if/else statement that checks if myPlaces[i] is equal to friendPlaces[j]. If it is, log to the console the place you have in common.
*/


//**while loop

var cards = ['Diamond', 'Spade', 'Heart', 'Club'];

var currentCard = 'Heart';

while (currentCard !== 'Spade') {
  console.log(currentCard);

  var randomNumber = Math.floor(Math.random() * 4); //randomly picks card.

  currentCard = cards[randomNumber]; //randomly picks card, then prints THAT card. 
}

console.log('Found a Spade!');

/*while (condition) {
   code block that loops until condition is false
   (line 464)
   The loop begins with the keyword while
Inside the parentheses, we can insert a condition. As long as the variable evaluates to true the block of code will loop.
Inside the code block we can write any code we'd like to loop.
}*/



//**linking a JavaScript file to HTML by including it as the src of a <script> tag inside of an HTML
//index.html
<!DOCTYPE html>
<html>
<head>
  <link rel='stylesheet' type='text/css' href='css/styles.css'>
</head>

<body>

  <h1>Proficient in:</h1>
  <div class='skillset'>
    <div class='skill-html'>
      <h1>HTML &amp; CSS</h1>
      <p class='description'>
        <div class='projects-button'>Recent Projects</div>
        <ul class='projects'>
          <li>Broadway</li>
          <li>MOVE</li>
        </ul>
      </p>
    </div>

    <div class='skill-js'>
      <h1>JavaScript</h1>
      <p class='description'>
        <div class='projects-button'>Recent Projects</div>
        <ul class='projects'>
          <li>Password Validator</li>
          <li>Whale Talk</li>
        </ul>
      </p>
    </div>

    <div class='skill-jquery'>
      <h1>jQuery</h1>
      <p class='description'>
        <div class='projects-button'>Recent Projects</div>
        <ul class='projects'>
          <li>Coming soon...</li>
        </ul>
      </p>
    </div>
  </div>
<script src='js/main.js'></script> //**main.js is stored in a folder. By linking js/main.js in the index.html file, we are asking the browser to run our JavaScript code each time index.html loads.
</body>

</html>

//main.js
alert('Hello JavaScript!'); // **When the HTML document loaded, it ran the code inside main.js, which created the alert pop-up.


//index.html
<!DOCTYPE html>
<html>
<head>
  <link rel='stylesheet' type='text/css' href='css/styles.css'>
</head>

<body>

  <h1>Proficient in:</h1>
  <div class='skillset'>
    <div class='skill-html'>
      <h1>HTML &amp; CSS</h1>
      <p class='description'>
        <div class='projects-button'>Recent Projects</div>
        <ul class='projects'>
          <li>Broadway</li>
          <li>MOVE</li>
        </ul>
      </p>
    </div>

    <div class='skill-js'>
      <h1>JavaScript</h1>
      <p class='description'>
        <div class='projects-button'>Recent Projects</div>
        <ul class='projects'>
          <li>Password Validator</li>
          <li>Whale Talk</li>
        </ul>
      </p>
    </div>

    <div class='skill-jquery'>
      <h1>jQuery</h1>
      <p class='description'>
        <div class='projects-button'>Recent Projects</div>
        <ul class='projects'>
          <li>Coming soon...</li>
        </ul>
      </p>
    </div>
  </div>
<script src='js/main.js'></script>
</body>

</html>

//main.js
var skillset = document.getElementsByClassName('skillset');

alert(skillset); // lines 586 - 588 confirms that JavaScript can select HTML elements. Since we can select HTML elements, we can manipulate them.



/*jQuery. A library is a set of code that contains useful pre-written functions that help with certain tasks.

A great library for interacting with the DOM is jQuery.

jQuery is a library written in JavaScript. The syntax and functions it contains will help us interact with DOM efficiently. */



// js/main.js or jQuery from lines 602 - 606 

function main() {
  
}

$(document).ready(main);

<!DOCTYPE html>
<html>
<head>
  <link rel='stylesheet' type='text/css' href='css/styles.css'>
</head>

<body>

  <h1>Proficient in:</h1>
  <div class='skillset'>
    <div class='skill-html'>
      <h1>HTML &amp; CSS</h1>
      <p class='description'>
        <div class='projects-button'>Recent Projects</div>
        <ul class='projects'>
          <li>Broadway</li>
          <li>MOVE</li>
        </ul>
      </p>
    </div>

    <div class='skill-js'>
      <h1>JavaScript</h1>
      <p class='description'>
        <div class='projects-button'>Recent Projects</div>
        <ul class='projects'>
          <li>Password Validator</li>
          <li>Whale Talk</li>
        </ul>
      </p>
    </div>

    <div class='skill-jquery'>
      <h1>jQuery</h1>
      <p class='description'>
        <div class='projects-button'>Recent Projects</div>
        <ul class='projects'>
          <li>Coming soon...</li>
        </ul>
      </p>
    </div>
  </div>
<script src='https://code.jquery.com/jquery-3.1.0.min.js'></script> //**link to jQuery.
<script src='js/main.js'></script>
</body>

</html>



//index.html

<!DOCTYPE html>
<html>
<head>
  <link rel='stylesheet' type='text/css' href='css/styles.css'>
</head>

<body>

  <h1>Proficient in:</h1>
  <div class='skillset'>
    <div class='skill-html'>
      <h1>HTML &amp; CSS</h1>
      <p class='description'>
        <div class='projects-button'>Recent Projects</div>
        <ul class='projects'>
          <li>Broadway</li>
          <li>MOVE</li>
        </ul>
      </p>
    </div>

    <div class='skill-js'>
      <h1>JavaScript</h1>
      <p class='description'>
        <div class='projects-button'>Recent Projects</div>
        <ul class='projects'>
          <li>Password Validator</li>
          <li>Whale Talk</li>
        </ul>
      </p>
    </div>

    <div class='skill-jquery'>
      <h1>jQuery</h1>
      <p class='description'>
        <div class='projects-button'>Recent Projects</div>
        <ul class='projects'>
          <li>Coming soon...</li>
        </ul>
      </p>
    </div>
  </div>
<script src='https://code.jquery.com/jquery-3.1.0.min.js'></script>
<script src='js/main.js'></script>
</body>

</html>

//main.js
/*The alert shows [object Object]. This is right and means that we successfully selected the same HTML element as before, but this time using jQuery.*/
function main() {
  var $skillset = $('.skillset');
  alert($skillset);
}

$(document).ready(main);


/*To make a page fade in, it must first be hidden. We can hide elements with jQuery with a function named hide.*/
//main.js
function main() {
  var $skillset = $('.skillset').hide(); //**allows fade in function to work. 
  alert($skillset);
}

$(document).ready(main);


//main.js
function main() {
  var $skillset = $('.skillset').hide();
  var $skillset = $('.skillset').fadeIn(1000); //allows page to fade in. The number in parenthesis is the time fade in occurs in milliseconds.
  alert($skillset);
}

$(document).ready(main);
