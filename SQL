--SQL

--from https://www.codecademy.com/courses/learn-sql/lessons/manipulation/exercises/relational-databases?action=lesson_resume


SELECT * FROM celebs;
/* A relational database is a database that organizes information into one or more tables. Here the relational database contains one table. 
2. A table is a collection of data organized into rows and columns. Tables are sometimes referred to as relations. Here the table is celebs. 
3. A column is a set of data values of a particular type. Here id, name, and age are each columns. 
4. A row is a single record in a table. The first row in the celebs table has:

An id of 1
A name of Justin Bieber
An age of 22
All data stored in a relational database is of a certain data type. Some of the most common data types are:

1. Integer, a positive or negative whole number 
2. Text, a text string 
3. Date, the date formatted as YYYY-MM-DD for the year, month, and day 
4. Real, a decimal value 

*/

--SQL Statements

/*CREATE TABLE is a clause. Clauses perform specific tasks in SQL. By convention, clauses are written in capital letters. Clauses can also be referred to as commands.
table_name refers to the name of the table that the command is applied to.
(column_1 data_type, column_2 data_type, column_3 data_type) is a parameter. A parameter is a list of columns, data types, or values that are passed to a clause as an argument. Here, the parameter is a list of column names and the associated data type.
The structure of SQL statements vary. The number of lines used do not matter. A statement can be written all on one line, or split up across multiple lines if it makes it easier to read. In this course, you will become familiar with the structure of common statements.*/

CREATE TABLE table_name (
    column_1 data_type, 
    column_2 data_type, 
    column_3 data_type
  );

CREATE TABLE celebs(id JEDI BATTLEMASTER ALSO VICE ADMIRAL, --characters only.
name CARPIO, age "22"); --digits must be in quotes.



INSERT INTO celebs (id, name, age) VALUES (1, 'Justin Bieber', 21); --INSERT INTO example

SELECT * FROM celebs; -- shows the new row.



--INSERT statements

INSERT INTO celebs (id, name, age)
VALUES (2, 'Twurking', 33);

INSERT INTO celebs (id, name, age)
VALUES (3, 'Trippin', 26);

INSERT INTO celebs (id, name, age)
VALUES (4, 'Gagokapala', 26);

SELECT name FROM celebs; --prints result(s) of INSERT statement(s)




--SELECT statement(s)

/*SELECT statements are used to fetch data from a database. Here, SELECT returns all data in the name column of the celebs table.

1. SELECT is a clause that indicates that the statement is a query. You will use SELECT every time you query data from a database. 
2. name specifies the column to query data from. 
3. FROM celebs specifies the name of the table to query data from. In this statement, data is queried from the celebs table. 

You can also query data from all columns in a table with SELECT.  
* is a special wildcard character that we have been using. It allows you to select every column in a table without having to name each one individually. */
 
 
 --UPDATE statement(s) allow editing of rows.

/*The UPDATE statement edits a row in the table. You can use the UPDATE statement when you want to change existing records.

1. UPDATE is a clause that edits a row in the table. 
2. celebs is the name of the table. 
3. SET is a clause that indicates the column to edit.

age is the name of the column that is going to be updated
22 is the new value that is going to be inserted into the age column.
4. WHERE is a clause that indicates which row(s) to update with the new column value. Here the row with a 1 in the id column is the row that will have the age updated to 22.*/

UPDATE celebs
SET age = 22
WHERE id = 1;

SELECT * FROM celebs; 



