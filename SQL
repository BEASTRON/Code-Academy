--SQL

--from https://www.codecademy.com/courses/learn-sql/lessons/manipulation/exercises/relational-databases?action=lesson_resume


SELECT * FROM celebs;
/* A relational database is a database that organizes information into one or more tables. Here the relational database contains one table. 
2. A table is a collection of data organized into rows and columns. Tables are sometimes referred to as relations. Here the table is celebs. 
3. A column is a set of data values of a particular type. Here id, name, and age are each columns. 
4. A row is a single record in a table. The first row in the celebs table has:

An id of 1
A name of Justin Bieber
An age of 22
All data stored in a relational database is of a certain data type. Some of the most common data types are:

1. Integer, a positive or negative whole number 
2. Text, a text string 
3. Date, the date formatted as YYYY-MM-DD for the year, month, and day 
4. Real, a decimal value 

*/

--SQL Statements

/*CREATE TABLE is a clause. Clauses perform specific tasks in SQL. By convention, clauses are written in capital letters. Clauses can also be referred to as commands.
table_name refers to the name of the table that the command is applied to.
(column_1 data_type, column_2 data_type, column_3 data_type) is a parameter. A parameter is a list of columns, data types, or values that are passed to a clause as an argument. Here, the parameter is a list of column names and the associated data type.
The structure of SQL statements vary. The number of lines used do not matter. A statement can be written all on one line, or split up across multiple lines if it makes it easier to read. In this course, you will become familiar with the structure of common statements.*/

CREATE TABLE table_name (
    column_1 data_type, 
    column_2 data_type, 
    column_3 data_type
  );

CREATE TABLE celebs(id JEDI BATTLEMASTER ALSO VICE ADMIRAL, --characters only.
name CARPIO, age "22"); --digits must be in quotes.



INSERT INTO celebs (id, name, age) VALUES (1, 'Justin Bieber', 21); --INSERT INTO example

SELECT * FROM celebs; -- shows the new row.



--INSERT statements

INSERT INTO celebs (id, name, age)
VALUES (2, 'Twurking', 33);

INSERT INTO celebs (id, name, age)
VALUES (3, 'Trippin', 26);

INSERT INTO celebs (id, name, age)
VALUES (4, 'Gagokapala', 26);

SELECT name FROM celebs; --prints result(s) of INSERT statement(s)




--SELECT statement(s)

/*SELECT statements are used to fetch data from a database. Here, SELECT returns all data in the name column of the celebs table.

1. SELECT is a clause that indicates that the statement is a query. You will use SELECT every time you query data from a database. 
2. name specifies the column to query data from. 
3. FROM celebs specifies the name of the table to query data from. In this statement, data is queried from the celebs table. 

You can also query data from all columns in a table with SELECT.  
* is a special wildcard character that we have been using. It allows you to select every column in a table without having to name each one individually. */
 
 
 --UPDATE statement(s) allow editing of rows.

/*The UPDATE statement edits a row in the table. You can use the UPDATE statement when you want to change existing records.

1. UPDATE is a clause that edits a row in the table. 
2. celebs is the name of the table. 
3. SET is a clause that indicates the column to edit.

age is the name of the column that is going to be updated
22 is the new value that is going to be inserted into the age column.
4. WHERE is a clause that indicates which row(s) to update with the new column value. Here the row with a 1 in the id column is the row that will have the age updated to 22.*/

UPDATE celebs
SET age = 22
WHERE id = 1;

SELECT * FROM celebs; 



/*The ALTER TABLE statement added a new column to the table. You can use this command when you want to add columns to a table.

1. ALTER TABLE is a clause that lets you make the specified changes. 
2. celebs is the name of the table that is being changed. 
3. ADD COLUMN is a clause that lets you add a new column to a table. 

twitter_handle is the name of the new column being added
TEXT is the data type for the new column

4. NULL is a special value in SQL that represents missing or unknown data. Here, the rows that existed before the column was added have NULL values for twitter_handle.*/

ALTER TABLE celebs ADD COLUMN
twitter_handle TEXT;

SELECT * FROM celebs;



--DELETE statement(s)
/*The DELETE FROM statement deletes one or more rows from a table. You can use the statement when you want to delete existing records.

DELETE FROM is a clause that lets you delete rows from a table.
celebs is the name of the table we want to delete rows from.
WHERE is a clause that lets you select which rows you want to delete. Here we want to delete all of the rows where the twitter_handle column IS NULL.
IS NULL is a condition in SQL that returns true when the value is NULL and false otherwise.*/

DELETE FROM celebs WHERE
twitter_handle IS NULL; --deletes all of the rows that have a NULL value in the twitter column.

SELECT * FROM celebs; 


--Queries

--Queries allow us to communicate with the database by asking questions and having the result set return data relevant to the question. 

SELECT name, imdb_rating FROM
movies; --prints name and imbd rating for all movies listed.

SELECT DISTINCT genre FROM movies; --prints genres of movies.


/*SELECT DISTINCT is used to return unique values in the result set. It filters out all duplicate values. Here, the result set lists each genre in the movies table exactly once.

1. SELECT DISTINCT specifies that the statement is going to be a query that returns unique values in the specified column(s)

2. genre is the name of the column to display in the result set.

3. FROM movies indicates the table name to query from.*/



SELECT * FROM movies WHERE imdb_rating > 8; --prints name, genre, year of release and imbd rating for all movies that have an indb rating above 8. 

/*1. WHERE is a clause that indicates you want to filter the result set to include only rows where the following condition is true.

2. imdb_rating > 8 is a condition that filters the result set. Here, only rows with a value greater than 8 in the imdb_rating column will be returned in the result set.

3. > is an operator. Operators create a condition that can be evaluated as either true or false. Common operators used with the WHERE clause are:

= equals
!= not equals
> greater than
< less than
>= greater than or equal to
<= less than or equal to*/


SELECT * FROM movies
WHERE name LIKE 'Se_en'; --prints only the movies whose name is 'Se_en.'


/*LIKE can be a useful operator when you want to compare similar values. Here, we are comparing two movies with the same name but are spelled differently.

1. LIKE is a special operator used with the WHERE clause to search for a specific pattern in a column.

2. name LIKE Se_en is a condition evaluating the name column for a specific pattern.

3. Se_en represents a pattern with a wildcard character. The _ means you can substitute any individual character here without breaking the pattern. The names Seven and Se7en both match this pattern.

% is another wildcard character that can be used with LIKE.*/



SELECT * FROM movies
WHERE name LIKE 'a%'; --prints all movies that start with the letter 'a.'

SELECT * FROM movies
WHERE name LIKE '%man%'; --prints all movies that have the word 'man' anywhere in the movie title.

/*% is a wildcard character that matches zero or more missing letters in the pattern.

A% matches all movies with names that begin with "A".
%a matches all movies that end with "a".
You can use % both before and after a pattern. Here, any movie that contains the word "man" in its name will be returned in the result set. Notice, that LIKE is not case sensitive. "Batman" and "Man Of Steel" both appear in the result set.*/

SELECT * FROM movies
WHERE name BETWEEN 'A' AND 'J'; --prints all movies(including genre, year released, and imdb rating) whose titles start with 'A' until, but excluding 'J.'


SELECT * FROM movies
WHERE year BETWEEN 1990 AND 2000; --prints all movies(including genre, year released, and imdb rating) that were released between 1990 and 2000.


/*The BETWEEN operator is used to filter the result set within a certain range. The values can be numbers, text or dates.*/

SELECT * FROM movies
WHERE year BETWEEN 1990 AND 2000
AND genre = 'comedy'; --prints comedic movies between 1990 and 2000.

SELECT * FROM movies
WHERE genre = 'comedy'
OR year < 1980; --prints either all comedy movies or movies that were released before 1980.
/*The OR operator can also be used to combine more than one condition in a WHERE clause. The OR operator evaluates each condition separately and if any of the conditions are true then the row is added to the result set.

1. WHERE genre = 'comedy' is the first condition in the WHERE clause.

2. OR year < 1980 is the second condition in the WHERE clause.

3. OR is an operator that filters the result set to only include rows where either condition is true. Here, we return movies that either have a genre of comedy or were released before 1980.
*/

SELECT * FROM movies
ORDER BY imdb_rating DESC; --prints movies in descending imbd rating.


/*You can sort the results of your query using ORDER BY. Sorting the results often makes the data more useful and easier to analyze.

1. ORDER BY is a clause that indicates you want to sort the result set by a particular column either alphabetically or numerically.

2. imdb_rating is the name of the column that will be sorted.

3. DESC is a keyword in SQL that is used with ORDER BY to sort the results in descending order (high to low or Z-A). Here, it sorts all of the movies from highest to lowest by their IMDb rating.

It is also possible to sort the results in ascending order. ASC is a keyword in SQL that is used with ORDER BY to sort the results in ascending order (low to high or A-Z).*/

SELECT * FROM movies
ORDER BY imdb_rating ASC
LIMIT 3; --prints only 3 movies according to ascending imdb rating. 
 
